using Infrastructure;
using Infrastructure.Attribute;
using Infrastructure.Enums;
using Infrastructure.Model;
using Mapster;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using ARW.Admin.WebApi.Extensions;
using ARW.Admin.WebApi.Filters;
using ARW.Common;
using ARW.Admin.WebApi.Controllers;
using ARW.Model.Dto.Api.${genTable.moduleName};
using ARW.Service.Api.IBusinessService.${genTable.moduleName};
using ARW.Model.Models.Business.${genTable.moduleName};
using ARW.Model.Vo.Api.${genTable.moduleName};
using Microsoft.AspNetCore.Authorization;
using Geocoding;

namespace ${options.ApiControllerNamespace}.Controllers.Api.${genTable.moduleName}
{
    /// <summary>
    /// ${genTable.FunctionName}控制器Api
    /// </summary>
    [Verify]
    [Route("api/[controller]")]
    public class ${replaceDto.ModelTypeName}ApiController : BaseController
    {
        private readonly I${replaceDto.ModelTypeName}ServiceApi _${replaceDto.ModelTypeName}ServiceApi;

        /// <summary>
        /// 依赖注入
        /// </summary>
        /// <param name="${replaceDto.ModelTypeName}ServiceApi">${genTable.FunctionName}${genTable.FunctionName}Api服务</param>
        public ${replaceDto.ModelTypeName}ApiController(I${replaceDto.ModelTypeName}ServiceApi ${replaceDto.ModelTypeName}ServiceApi)
        {
            _${replaceDto.ModelTypeName}ServiceApi = ${replaceDto.ModelTypeName}ServiceApi;
        }


$if(genTable.TplCategory == "tree")
        /// <summary>
        /// 获取${genTable.FunctionName}树形列表(Api)
        /// </summary>
        /// <param name="parm">查询参数</param>
        /// <returns></returns>
        [HttpGet("get${replaceDto.ModelTypeName}TreeList")]
        public async Task<IActionResult> Get${replaceDto.ModelTypeName}TreeListApi([FromQuery] ${replaceDto.ModelTypeName}QueryDtoApi parm)
        {
            var res = await _${replaceDto.ModelTypeName}ServiceApi.Get${replaceDto.ModelTypeName}TreeListApi(parm);
			if (res == null)
                res = new List<${replaceDto.ModelTypeName}VoApi>();
				
            return SUCCESS(res);
        }
$else
        /// <summary>
        /// 获取${genTable.FunctionName}列表(Api)
        /// </summary>
        /// <param name="parm">查询参数</param>
        /// <returns></returns>
        [HttpGet("get${replaceDto.ModelTypeName}List")]
        public async Task<IActionResult> Get${replaceDto.ModelTypeName}ListApi([FromQuery] ${replaceDto.ModelTypeName}QueryDtoApi parm)
        {
            var res = await _${replaceDto.ModelTypeName}ServiceApi.Get${replaceDto.ModelTypeName}ListApi(parm);
            return SUCCESS(res);
        }
$end

		/// <summary>
        /// 获取${replaceDto.ModelTypeName}详情(Api)
        /// </summary>
        /// <param name="parm">查询参数</param>
        /// <returns></returns>
        [HttpGet("get${replaceDto.ModelTypeName}Details")]
        public async Task<IActionResult> Get${replaceDto.ModelTypeName}Details([FromQuery] ${replaceDto.ModelTypeName}DtoApi parm)
        {
            //if (parm == null) throw new CustomException("参数错误！");

            var res = await _${replaceDto.ModelTypeName}ServiceApi.Get${replaceDto.ModelTypeName}Details(parm);

            if (res != "[]")
            {	
                res = res.Remove(0, 1);
                res = res.Substring(0, res.Length - 1);
                var data = res.FromJSON<${replaceDto.ModelTypeName}ApiDetailsVo>();
                return SUCCESS(data);
            }
            else
            {
                return SUCCESS(res);
            }
        }

    }
}
